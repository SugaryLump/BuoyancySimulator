#version 450

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 2) buffer forcesSSBO {
    vec4 forces[];
};

uniform uint totalForces;

shared vec4[16] forcesAux;


// Parallel sum reduction based on NVIDIA's CUDA Webinar 2 (4th iteration, sequential addressing)
// https://developer.download.nvidia.com/compute/cuda/1.1-Beta/x86_website/projects/reduction/doc/reduction.pdf
void main() {
    // get thread ids
    uint lid = gl_LocalInvocationID.x;
    uint gid = gl_WorkGroupID.x * gl_WorkGroupSize.x * 2 + lid;

    // each thread gets 2 elements and adds them together (first addition of
    // the reduction, hard coded outside the loop)
    forcesAux[lid] = gid < totalForces ? forces[gid] : vec4(0);
    if (gid + gl_WorkGroupSize.x < totalForces) {
        forcesAux[lid] += forces[gid + gl_WorkGroupSize.x];
    }
    memoryBarrierShared();

    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (lid < stride) {
            forcesAux[lid] += forcesAux[lid + stride];
        }
        memoryBarrierShared();
    }

    if (lid == 0) {
        forces[gl_WorkGroupID.x] = forcesAux[0];
    }
}